#include <bits/stdc++.h>

using namespace std;

int main()
{
    priority_queue<long long, vector<long long>, greater<long long> > q;

    ifstream infile;

        infile.open("inputtest1.txt");
        if(!infile)
            cout<<"Input file open failed!"<<endl;

    ofstream outfile;
        outfile.open("outputtest.txt");
        if(!outfile)
            cout<<"Output file open failed!"<<endl;


   long long flag;             //Flag, 1==message1, 2==message2
   long long messagenum=10;    //Total number of messages
   long long message1,message2;//Messages generated by both clients at this time
   long long message1t=-1;     //The first client received the last message
   long long message2t=-1;     //The second client received the last message
   long long minn=1;           //A data axis that records the current minimum possible
   long long min1=1;           //The minimum possible before the first client
   long long min2=1;           //The minimum possible before the second client
   long long num;              //Gets the current minimum value of the priority_queue
   long long temp;

    for(int i=0;i<messagenum;i++){

        infile>>flag;
        if(flag==1){
            infile>>message1;
            if(message1<message1t){
                min1=message1;
            }
            q.push(message1);
            message1t=message1;
        }

        else {
            infile>>message2;
            if(message2<message2t){
                min2=message2;
            }
            q.push(message2);
            message2t=message2;
        }

        temp=minn;
        minn=min(min1,min2);
        if(temp==minn){
            minn++;
            min1++;
            min2++;
        }

        while(!q.empty()){

            num=q.top();
            if(num>minn)
                break;

            else{
                cout<<num<<endl;
                outfile<<num<<endl;
                q.pop();
            }

        }
    }

    infile.close();

    outfile.close();

    q= priority_queue<long long, vector<long long>, greater<long long> >();

    return 0;
}
